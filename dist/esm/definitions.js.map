{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface Peer {\n  deviceId: string;\n  connection: RTCPeerConnection;\n  dataChannel: RTCDataChannel;\n  latency: number;\n  packetLoss: number;\n}\n\nexport interface CounterData {\n  code: string;\n  isPresent: boolean;\n  eventId: string;\n  isManual: boolean;\n  timestamp: number;\n}\n\nexport interface InitialState {\n  type: 'initial_state';\n  attendees: Record<string, CounterData>;\n}\n\nexport interface NFCError {\n  code: number;\n  message: string;\n  type?: 'ios' | 'android';\n}\n\nexport interface P2PCounterPlugin {\n  // NFC Methods\n  startNFCDiscovery(): Promise<void>;\n  stopNFCDiscovery(): Promise<void>;\n  sendNFCMessage(options: { message: string }): Promise<void>;\n  \n  // WebRTC Methods\n  initializeWebRTC(): Promise<void>;\n  createPeerConnection(options: { deviceId: string, isInitiator: boolean }): Promise<void>;\n  sendCounter(options: { code: string, isPresent: boolean, eventId: string }): Promise<void>;\n  sendInitialState(options: { deviceId: string, state: Record<string, CounterData> }): Promise<void>;\n  disconnectPeer(options: { deviceId: string }): Promise<void>;\n  startKeepalive(): Promise<void>;\n  stopKeepalive(): Promise<void>;\n  getNetworkStats(): Promise<{\n    averageLatency: number;\n    packetLoss: number;\n    keepaliveInterval: number;\n  }>;\n  \n  // Event Listeners with platform-specific handling\n  addListener(\n    eventName: 'nfcDiscovered',\n    listenerFunc: (data: { \n      deviceId: string; \n      timestamp: number;\n      // iOS specific fields\n      systemDialogPresented?: boolean;\n      tagType?: string;\n    }) => void\n  ): Promise<void>;\n\n  addListener(\n    eventName: 'nfcPushComplete',\n    listenerFunc: (data: { deviceId: string }) => void\n  ): Promise<void>;\n\n  addListener(\n    eventName: 'nfcError',\n    listenerFunc: (error: NFCError) => void\n  ): Promise<void>;\n\n  // Platform check utility\n  getPlatform(): Promise<{ platform: 'ios' | 'android' | 'web' }>;\n}"]}