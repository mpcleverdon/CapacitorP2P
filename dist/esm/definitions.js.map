{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface Peer {\n  deviceId: string;\n  connection: RTCPeerConnection;\n  dataChannel: RTCDataChannel;\n  latency: number;\n  packetLoss: number;\n}\n\nexport interface CounterData {\n  code: string;\n  isPresent: boolean;\n  eventId: string;\n  isManual: boolean;\n  timestamp: number;\n}\n\nexport interface InitialState {\n  type: 'initial_state';\n  attendees: Record<string, CounterData>;\n}\n\nexport interface NFCError {\n  code: number;\n  message: string;\n  type?: 'ios' | 'android';\n}\n\nexport interface P2PCounterPlugin {\n  // NFC Methods\n  startNFCDiscovery(): Promise<void>;\n  stopNFCDiscovery(): Promise<void>;\n  sendNFCMessage(options: { message: string }): Promise<void>;\n  \n  // WebRTC Methods\n  initializeWebRTC(): Promise<void>;\n  createPeerConnection(options: { deviceId: string, isInitiator: boolean }): Promise<void>;\n  sendCounter(options: { code: string, isPresent: boolean, eventId: string }): Promise<void>;\n  sendInitialState(options: { deviceId: string, state: Record<string, CounterData> }): Promise<void>;\n  disconnectPeer(options: { deviceId: string }): Promise<void>;\n  startKeepalive(): Promise<void>;\n  stopKeepalive(): Promise<void>;\n  getNetworkStats(): Promise<{\n    averageLatency: number;\n    packetLoss: number;\n    keepaliveInterval: number;\n  }>;\n  \n  // Event Listeners with platform-specific handling\n  addListener(eventName: 'nfcDiscovered', listenerFunc: (event: NFCDiscoveredEvent) => void): PluginListenerHandle;\n  addListener(eventName: 'nfcError', listenerFunc: (event: NFCErrorEvent) => void): PluginListenerHandle;\n  addListener(eventName: 'nfcPushComplete', listenerFunc: (event: NFCPushCompleteEvent) => void): PluginListenerHandle;\n  addListener(eventName: 'counterReceived', listenerFunc: (event: CounterEvent) => void): PluginListenerHandle;\n  addListener(eventName: 'peerConnected', listenerFunc: (event: PeerEvent) => void): PluginListenerHandle;\n  addListener(eventName: 'peerTimeout', listenerFunc: (event: PeerEvent) => void): PluginListenerHandle;\n  addListener(eventName: 'meshDiscovery', listenerFunc: (event: MeshDiscoveryEvent) => void): PluginListenerHandle;\n  addListener(eventName: 'meshMessage', listenerFunc: (event: MessageEvent) => void): PluginListenerHandle;\n  addListener(eventName: 'messageStatus', listenerFunc: (event: MessageStatusEvent) => void): PluginListenerHandle;\n\n  // Platform check utility\n  getPlatform(): Promise<{ platform: 'ios' | 'android' | 'web' }>;\n}\n\nexport interface Attendee {\n  code: string;\n  isPresent: boolean;\n  timestamp?: number;\n  eventId?: string;\n  isManual?: boolean;\n}\n\nexport interface NetworkStats {\n  averageLatency: number;\n  packetLoss: number;\n  keepaliveInterval: number;\n  messageCount?: number;\n  networkStrength?: number;\n}\n\nexport interface NFCDiscoveredEvent {\n  deviceId: string;\n  systemDialogPresented?: boolean;\n}\n\nexport interface NFCErrorEvent {\n  code: number;\n  message?: string;\n}\n\nexport interface NFCPushCompleteEvent {\n  deviceId: string;\n}\n\nexport interface PeerEvent {\n  deviceId: string;\n  isInitiator?: boolean;\n}\n\nexport interface CounterEvent {\n  type?: 'initial_state';\n  code?: string;\n  isPresent?: boolean;\n  timestamp?: number;\n  attendees?: Record<string, Attendee>;\n}\n\nexport interface MeshDiscoveryEvent {\n  data: string; // JSON string of topology data\n}\n\nexport interface MessageEvent {\n  data: string; // JSON string of message data\n}\n\nexport interface MessageStatusEvent {\n  messageId: string;\n  status: 'pending' | 'success' | 'failed';\n  error?: string;\n  attempts?: number;\n}\n\nexport interface P2PCounterPluginEvents {\n  nfcDiscovered: NFCDiscoveredEvent;\n  nfcError: NFCErrorEvent;\n  nfcPushComplete: NFCPushCompleteEvent;\n  peerConnected: PeerEvent;\n  peerTimeout: PeerEvent;\n  counterReceived: CounterEvent;\n  meshDiscovery: MeshDiscoveryEvent;\n  meshMessage: MessageEvent;\n  messageStatus: MessageStatusEvent;\n}"]}